Nosferatu's Brooch
Lifespring
Firebug
Stormtouch
Soulhaven
Sightless Sentinel
Elemental Force
Zealous Band
Viribus
Exodus
Medivos
Amulet of Solstice
Medallion of the Dead
Optic Amulet
Eyes of Ktulu
The Rising Sun
Rainbow Relic
Griswold's Fencer
Griswold's Fencer
Griswold's Fencer
Griswold's Edge
Griswold's Edge
Griswold's Edge
Midas' Treads
Hotspur
Spirit Walkers
Blood Stompers
Boots of Grounding
Shadow Dancers
Midas' Touch
Fists of Wrath
Firmgrip
Shock Pincers
Bard's Tale
Rainbow Gloves
Guards of Resource
Winds of Change
Clasp of the Infinite
The Butcher's Gloves
Black Harvest
Alleria's Guardmail
Flavo Lapis
Executioner of Hell
Gnarled Root
Krondor's Cudgel
Legacy of Blood
Bone Hunter
Infernal Hatred
Scepter of Engart
Mortelecht
Spirit Ward
Stalker's Cloak
Arkaine's Wrath
Arcslasher
Pride of the Ancients
Fool's Luck
Morbid Sight
Numbrazor
Mask of Anger
Baranar's Star
Gotterdamerung
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Grace of Death
Silver Stag unused
Griswold's Edge
Griswold's Edge
Griswold's Edge
Tal-Rasha's Duress
Winter Suit
Leviathan's Cage
Aldur's Legacy
Scales of Terror
Red Eventide
Skull Breaker
Shroud of Sands
Reign of Kaamos
Dragonbreach
Thunderbird
Golden Eagle
Infernal Aegis
Deathshelter
Shield of Reflections
Soulhaven
Morana's Demise
Nosferatu Bangle
Giant's Knuckle
Mercurial Ring
Warrior's Band
Frost Signet
Hoop of Magma
Magistrate Ring
Survivor's Bracelet
Pacification Bracer
Executioner's Oath
Ring of Mammoth
Inferno
Amulet of Solstice
Rakabis
Pendragon
Demon Hunter's Ankh
Gorget of the Huntress
Anduril's Heritage
Stone of the Dark Sea
Pendant of Deceit
Scarab of Slumber
Medallion of the Dead
Ring of Resource
Civerb's Icon
Optic Amulet
Torch of Devotion
Eyes of Ktulu
The Executioner's Mask
Ring of Truth
Ragespike's Constricting Ring
Xorine's Ring
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Bow of Sourness
Hakai Suru
The Mangler
Clawhand
Wicked Axe
Civerb's Club
Demonspike Coat
Burning Aim
Skullhold
Woodspan
Desert Dragon
Stoneskin
Infernal Power
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Token of Terror
Infernal Deception
Celestial Star
Renegade's Icon
Ring of Purity
Ring of Purity
Ring of Purity
Empyrean Band
Empyrean Band
Empyrean Band
Bul-Kathos' Raiment
Greyform
Belphegor's Ravager
The Gnasher
Rakescar
Peasant Cap
Peasant Cap
Peasant Cap
Dragonwing
Lorus' Honor
Shatterskull
Illuminator
Bonesnap
Earthshaker
Blood Thorn
Bringer of Pain
Civerb's Cudgel
Amulet of the Brume
Amulet of the Brume
Amulet of the Brume
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Griswold's Edge
Griswold's Edge
Griswold's Edge
Veil of Steel
Veil of Steel
Veil of Steel
Stonekeep
Lorus' Parry
Dreg'atar Tower
Bloodsipper
Madman's Rust
Deathgaze
Ebon Faceplate
Night Scorpion
Recluse Warrior
Ambidexter
Stormchaser
The Protector
Mindcry
Gravenspine
Lich Wand
Bloodscourge
Wand of Jester
Dragonfire
Widowmaker
Eaglehorn
Prismatic Bow
Riphook
Ring of Tower
Ring of Illumination
Lut Gholein Echo
Band of Untold Secrets
Ring of Zenda
Band of Readiness
Bronzehorse
Ring of Engagement
Conjure of Sacrifice
Grudge
Death Hunter's Ring
Ring of the Pits
Templar's Relic
Griswold's Try
Naj's Crown
Cryptic Diadem
Veil of Shadows
The Strafer
Lightforge
Dreamflange
Zakarum's Hand
Royal Striker
The Cranium Basher canclt
Black Razor
The Backstabber
Flamedart
Chillshank
Obliterator
The Blackoak Bow
Starbeamer
Banemaster
Naj's Staff
Angelwrath
Spiritual Tower
Berserker's Buckler
Adema
Goreshine
Dawn of Anger
Dragonbreath
Ancestral Call
Bloodmoon
Mantle of Silver
Mantle of Gore
Legacy of Blood
Krondor's Defense
Gotterzorn
Bul-Kathos' Child
The Butcher's Cleaver
Messerschmidt's Reaver
Hellslayer
Prismatic Axe
Voidslasher
Death Cleaver
Hexen
Naj's Heavy Plate
Plate of Infinity
Steel Carapace
Stormplate
Tyrael's Blessing
Baranar's Plate
Royal Plate
Bhaltavir's Garb
Plate of Engart
Berserker's Faith
Lorus' Valour
Adamantine Armour
Spirit Forge
Skullward
Gloomsong
Ring of Solicitude
Mind Eclipse
Blind Guardian
Blackjade
Belial's Word
The Undead Crown
Crown of Thorns
Darklight
Eaglecrown
Everdyme
Gold Burden
Mjollnir
Hammer of Jholm
Martel de Fer
Witchslayer
Hammer of Frenzy
Maul of Quake
Hellforge Hammer
The Deflector
Steelshade
Rockstopper
Steelskull
Steelviper
Helm of Shimmering
Giant Skull
Winged Helmet
Baldur's Bane
Darksight
Iron Bonnet
Steel Bonnet
Morlag's Helmet
Avenger Helmet
Beakvisor
Bul-kathos' Helm
War Artist
Helm of Zeal
Coif of Iron
Griswold's Caster
Griswold's Caster
Griswold's Caster
Griswold's Tool
Griswold's Tool
Griswold's Tool
Griswold's Crusher
Griswold's Crusher
Griswold's Crusher
Griswold's Slasher
Griswold's Slasher
Griswold's Slasher
Griswold's Enchanter
Griswold's Enchanter
Griswold's Enchanter
Infernal Rage
Devastation Edge
Frostmourne
Doombringer
Gleamscythe
Spiral Staff
Mindflayer
Staff of Shadows
The Red Pillar
Maelstrom
Bane Ash
Razorswitch
Ribcracker
Pacification Rod
Spellwarp
Skull Collector
Thundercall
The Black Sun
Mask of Palantir
Ghoulflay
Wormskull
Abysmal Mask
Galleon
Stormwave
Sirius' Bo
Underworld Spine
Bane Shaft
Rod of Mana Rain
Rattlecage
Ironskin
Ikzelion's Rig
Goreblink
Renegade's Guise
Nightscape
Silks of the Victor
Sabiru's Hideout
Guardian Angel
Armor of Domination
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Arkaine's Valor
Will of the Ancients
Insecutor
Peasant Straps
Secutor Straps
Scissores' Armor
Stiched Leather
Mercurial Armor
The Centurion
Twitchthroe
Lightburn
Vorpal Vest
Ceremonial Cloak
The Rainbow Cloak
Thraex
Gladiator's Horns
Secutor
Murmillo
Goldseeker
Adamantine Rig
Ornate Guise
Brainward
Wisdom's Wrap
Sand Robe
Cape of Roses
Burier of Hearts
Fulminator
Void Sting
Blight Touch
Leadcrow
The Black Widow
Doomslinger
Hellrack
Ballista
Lancethrow
Stormcast
Heart Carver
Soul Carver
Thundercarver
Inferno
The Chameleon
Nex
Gibbous Moon
Empyrean Ire
Coat of Levitation
Sepultura
Kammori
Death Galore
Kabraxis' Bane
Bloodrise
Felloak
Stoutnail
Emperor's Mail
Mail of Duality
Mail of Sulfur
Tainted Circle
Dark Quasar
Elemental Barrier
Kabraxis' Sentry
Keel's Pride
Balrogue
Xilexta's Vision
Zakarum Shield
Warpspider
Ghoulblood
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Scout's Dress
Alteration Ward
Quaxor's Cover
Galesong
Labyrinthine Suit
Mirage
Windfury
Korax' Devotion
Grief
Splendour
Bovine Armor
Celestial Shelter
Baranar's Skull
Underworld Rage
Wand of Zhar the Mad
Immovable Plate
Sirius' Garment
Rising Moon
Cuirass of Rapacity
Voidspawn
Libra
Bentwood
Lifespring
Heretic
Flamebite
Rainbow Staff
Staff of Dreams
Staff of Darkness
Death Whisper
Staff of Fear
Eclipse
Black Hawk
Siege Staff
Stormbash
Luna
Grey Staff
Bloodcall
Eagleclaw
Kobra
Thunderbuzz
Flamebuster
Prismatic Star
Renegade's Claw
Renegade's Wrath
Judgement Spade
Inner Sight
Bonesaw
Azurewrath
Scout's Line
Painwing
Bonestring
Dark Moon
Exodus
Darkness of Despair
Ring of Sacrifice
Detsa
Nether Coil
Ring of the Core
Velitus
Golden Gaia
Cyclone
Ignis Demonica
Ring of Sobbing
Elysian Ring
Gloom of Oblivion
Underworld Curse
Xentur's Vision
Athael's Rage
Sorrow
Horned God
Bravery of the Fallen
Eden Ring
The Golden Boa
The Overseer's Might
Anathema
Solar Eclipse
Lunar Eclipse
Spiritual Band
Hell's Blessing
Heaven's Curse
Enigma
Postmortem
Call of Gehenna
Death of Hope
Lucifer's Hate
South of Heaven
Zealous Band
Drainer of Souls
Velocity
Suffering of the Damned
Binding of Tal-Rasha
Skull of Oppression
Amulet of War
The Black Eye
Bloodstar
Shimmering Stone
Frozen Heart
Amulet of Concentration
Xorine's Amulet
Amulet of the Mystics
Collar of Resource
Mortuus Archangelus
Rain of Blood
Azmodan's Power
Groundshifter
Dark Star
Scepter of Mammon
Dwarven Face
Attika Grande
Sarbadhar
Severus
unused unique
Ghoulslayer
Axe of Nosferatu
Ward of Infinity
Steelface
Murmillo Chains
The Bringer of Rain
Sunstrike
The Cranium Basher
Anthanasia
Split Skull Shield
Doom Keeper
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Abaziil's Promise
Armor of the Pits
Obsidian Might
Contemplator
Mindrend
Spiritual Enchanter
Deathweb
Blackoak Bell
Thinking Cap
Shako
Biggin's Bonnet
Quaxor's Shelter
Cultist Robe
Mantle of Darkness
Vorpal Vest
Scholar's Cape
Neophyte Cape
Knightly Tabard
Angelic Garment
Rainbow Coat
Wolvenhide
Blood Omen
Ormus' Robes
Yeqon's Cudgel
Xilan's Barb
Stonecrusher
Nest of Discord
Kingslayer
Eternity
Crushflange
Flamesong
Moonfall
Bankai
Blade of Divinity
Lavadoom
Thunderblade
Serenity
Shirotachi cancelled
Shino-Kege cancelt
Renegade's Anger
Plate of Ether
Arcane Fetters
Flame Confinement
Plate of Meditation
Gloom
Joker's Jacket
Silent Slayer
Golembane
Rune Master
Bhaltavir's Decapitator
Celestial Visor
Grim Reaper
The Gavel of Pain
Wand of Fading Memories
The Amplifier
Adversary of Gods
Gladiator's Woe
Brimstone
Ethereal Edge
Gridfence
Renegade's Teaching
Sirius' Zeal
Silent Moon
Curse Howler
Stout Guardian
Rust Mirror
Red Dwarf
Shanduril's Parry
Shield of Spider Eyes
Itami no Dorei
Gold Incuser
The Brutalizer
Scout's Hat
Spellbend
Khalim's Will
Shadow Thief
Serpent Slayer
Knout of Torturing
Carrera
Blazelash
Stormhand
Chains of War
Colossus
Hazard
Soulflayer
Blade of Tracking
Bloodharvest
Dreg'atar Shelter
Blizzard
Black Rogue
Witch Wail
Crowbeak
Brainhew
Bloodspill
Axe of Fechmar
Goreshovel
Biclops' Axe
Wrath of the Gods
Breaker of Chaos
Aguinara's Vengeance
Staff of Domination
Autumn's Call
The Grand Vizier
Gladiator's Chains
Infernal Discipline
Celestial Guard
Celestial Redeemer
Stormbite
Thunderclap
Celestial Flagellator
Black Talon
The Steel Lion
Cranium of Zeal
Stigmatizer
Renegade's Wrath
Bushi-Un
Lash of Doomsday
Devourer of Souls
Infernal Cage
Hoplomacus
Amazon's Corset
Cagemuzzle
Windforce
Doomsayer
Inner Sanctuary
Chaos Bringer
Emptyface
Faceguard
Spiritual Fortress
Spiritcoif
Firesong
Underworld Heart
Helm of Rosary
Damnable Tower
Blazing Wrath
Baranar's Maul
Scout's Flower
Gladiator's Burn
Sirius' Seal
Joker's Cackle
Amulet of the Cat
Amulet of the Bull
Stout Conviction
Renegade's Sign
Scout's Ring
Scout's Bangle
Gladiator's Will
Gladiator's Morale
Sirius' Wisdom
Sirius' Judging
Joker's Giggle
Joker's Grin
Ring of Lore
Leviathan's Soul
Trollbite
Dodgecat
Ring of Aut
Bonepierce
Bent Horn
Nail Feeder
Fire Screamer
Blight Mirror
Siege Bow
Night Rogue
Betelgeuse
Spiral Knife
Leechspike
Black Knife
Mindbite
Gryphon's Claw
Edgewarp
Goredrill
Thorn of Sorcery
The Victimizer
Flayer of Heresy
Knife of Doomsday
Naj's Puzzle
Massaraksh
Bramble
Inarius' Seal
Doom Serpents
Blessgyre
Bloomfade
Bloodrim
Steel Terret
Dwarf Star
Ring of Regha
The Bleeder
Blueprint
Ring of Tower
Cagemuzzle
Defender of Faith
The Red Serpent
Lucifer's Fortress
Mail of Agility
Armor of Blood
Stygian Guard
The Equalizer
Fulminator
The Incinerator
Rough Justice
Black Hades
Plate of Equilibrium
Condor
Viperyne
Duriel's Shell
Ring of the Vise
Jewel of Discernment
Ring of Oppression
Mithril Infusion
Yeqon's Curse
Ward of Insight
Band of Divination
Condemned Aim
Ring of Bargaining
Woundseeker
Cudgel of Tears
Deathmauler
Whipclub
Goldball
Fleshbrand
The Rammer
Gonnagal's Dirk
Skin Piercer
Prod of Sakhar
Sting
Red Rondel
Pig Sticker
Kukri
Skiver
Spectral Poniard
Ghost Shard
Veznan's Remorse
Traveller's Harness
Mantle of the Dark
Bughul's Conjure
Sacrilege
Arcane Panoply
Mountain of Doom
Lantern of Reduction
Darkness Robe
Bear Hide
Coat of Tolerance
Snowbound Brigandine
Butcher of the Fallen
Sharp Beak
Limbsplit
Shockfire
Tome of Black Names
Book of Lava
Codex of Lies
Wretched Tome of Malediction
Gospel of Darkness
Storm Spire
Staff of Cremation
Hurricane
Soulflay
Seeker of Death
Jaws of Dragonsouls
Armor of the Old Gods
Rod of Dark Wizardry
Voidrod
Joker's Beak
Crimson Dawn
Bloodletter
Shadowsteel
Defender of Denial
Vest of Distant Fires
Godly Greatplate
Stormguard
Viribus
Vestment of Arcane Magic
Medicus Morbum
Staff of Meditation
Polaris
Celestial Staff
Virgam Tenebris
Retiarius' Bondage
Baphomet's Heart
Wall of Spears
Coat of Roses
Party's Over
Dead Skin Mask
Cadaverous Face
Face Gnash
Insanity
Pighead Mask
Soul Carver
Silent Anger
Torn Flesh of Angels
Skin of the Fallen
Wraps of Suffering
Boneflesh
Gladiator's Bane
Tunica Proelium
Alta Scientia
Hat of War
Robbing Hood
Rainbow Cap
The Grandfather
Dreamreaver
Espada
Verus' Justice
Gloria Occidendum
Stonecrusher
Bringer of Darkness
Blackheart Mallet
Bringer of Decadence
Arcanum
Vorpal Crossbow
Avenger
Vindicator
Bonestinger
Heatlock
Ballesta de Ensueno
Slayer of Dragons
Hellrack
The Black Swan
Diamondyne
Meatslasher
BlackRazor
Spectral Knife
Guardian of the High Heavens
Prismatron
Righter of Wrongs
Xorus' Hacker
Survivor of the Dark Exile
The Bringer of Light
Scales of Terror
Sparking Mail
Silks of the Victor
Grizzled Falcon Armor
Silver Stag
Windrider
Sanguinarius
The Diggler
Gull
Bloodplay
Aim Gauche
Spiculus' Razor
The Fortifier
Divinarius
Razorclaw
Icicle
Purifier of Souls
Seeker of Demons
White Wind
The Unforgiven
Heartslasher
The Endless Darkness
Blade of Slumber
Morbid Sight
Mask of Palantir
Ghoulflay
Wormskull
Abysmal Mask
Galleon
Bravery of the Fallen
Black Crusade
The Overseer's Might
Fires of the First Age
Sanctified Ring
Morana's Demise
Clergy Ring
Thunderstruck Ring
Ring of Elements
Seal of Shadows
Toxicore
Invoker
Purger of Sins
Sigil of Blackness
Magistrate Ring
Ignis Demonica
Ring of the Core
Elysian Ring
Darkness of Despair
Destiny Of Chaos
Exocet
Golden Gaia
Call of Gehenna
Hoop of Magma
Death of Hope
Ilduri's Gift
Lucifer's Hate
South of Heaven
Envilute
Drainer of Souls
Suffering of the Damned
Binding of Tal-Rasha
Horned God
Dragonfly
Mansion of Dreams
Arcane Flames
Face of Divinity
Stag Wall
Veznan's Desire
Reign of Kaamos
Shield of Onslaught
Crystallite
Aguinara's Sanctuary
Flame of the Ancient World
Damnable Tower
Skybird Trill
Gluttony
The Black Gate
Netherworld Shield
Sigil of Zenda
Sword of Travelling
Agonizer
Visage
Iridescent Steel
Boarfang
Gorecraze
Dagger of Madness
The Grizzly
Purse Cleaver
Shadowhawk
Spectral Crossbow
Blind Guardian
Diamondstring
The Diluter
The Prover
Slayer of Shadow
Sword of Spurning
The Lacerator
The Pacificator
Rage
Kraken
The Tempest
Heartseeker
Dragonwing
Betelgeuse
The Harp
Viperskin Bow
Webspit
Igniter of Souls
Harp of the Dead
Stormbreaker
Apocalypse Harbinger
Violin of Armageddon
Harvester of Ocher
Riftwalker
Silverbeak
Heatrazor
Baranar's Edge
Bane of Tannari
Expunger of Immortals
Ice Shank
The Eater of Souls
Flesh Dissolver
The Dancing Dervish
Blade of Repulsion
Symphony of Destruction
Limbcutter
Decapitator
Ode of Requital
Flame of Reprisal
Bloodsong
Epiphany
Lateralus
Dimensional Arcblade
Tavakeen's Reach
Trinix
Bloodjaw
Butcher of Pigs
Bonebreaker
Arrowbite
Mirroring Circle
Treasure Finder
Feral Spirit
Disk of Eternity
Trespanor
Etherplow
Blightseeker
Bonecutter
Stormbender
Lavatouch
The Last Rebuke
Criterion
Amurdill
Stormbringer
God of the Arena
Gleamscythe
Shirotachi
Ghost of Sunrise
Game of Reflections
Blade of Roses
Akaviri
Edge of Sanity
Eater of Flesh
The Dry Rain
Shino-Kege
Kobayashi's Pride
Mageslayer
The Poacher
Blade of Repulsion
The White Tiger
Razor of the Seven Suns
Stormrush
Blight Gust
Shimizu
Kusanagi
Crosswind Slasher
Khalim's Will
Blazelash
Shadow Thief
The Wrecking Ball
Stormhand
Hammer of Leverage
Weltenbrecher
Vortex' Axle
Shortface
Witch Slayer
Kanasko
Blightforce
Ultimation
Mallet of Expiation
The Third Abaddon
Treasure Seeker
Doomslayer
Phobos
Golembane
Dayaxe
Axe of Bloodlines
Absolver
The Undead Burner
Woestave
Spectral Slasher
Silent Slayer
Kismet
Talon of Jade
Bleeder Teeth
Tahu's Cut-Throat
Stormblight
Shadowkiller
Canis Minoris
Fleshgnaw
Nails of Justling
Voidcutter
Woundbreaker
Hallowed Redeemer
Flesh Burner
Blightstorm
Beast Slayer
Thunderstroke
Underworld Lament
Black Lily
VizJerei Apprentice Staff
Tears of Corrosion
Spell Goad
Chaos Bringer
Dreamlyre
Immolator
Stormwave
Sirius' Bo
Underworld Spine
Bane Shaft
Hibayake
Nagashima
Umenogami
Takamura
Sanctifier
Sayonara
Spectral Club
Ogre Mauler
Death Sentencer
Dread Judge
Natamaki
Warden of the East
Spellbreaker
Travincal Teachings
Brainsmite
The Blunt Horn
Firestarter
Dealbreaker
Sarbadhar
Dreadvisor
Duskdeep
Fortunefinder
The Apostasy Canticle
Life Hallows
Windreaver
Dawnbreaker
Storm Herald
Dreamkiller
Forlorn Hope
Mail of Combustion
Repugnance
Scales of Affluence
Armor of the Undying
The Blackprint
Equipoise
Blitz Tenet
Avatar of Armageddon
Soulcatcher
Durzu's Wargem
Baphomet's Heart
Crazefire's Focusing Prism
Civerb's Beard
Medallion Of Courage
Viper Soul
Jarulf's Kaleidoscope
Fanaticism Dome
Beakvisor
Helm of Spirits
Morlag's Helmet
War Artist
Steelshade
Shroud of the Three
Vizjerei Outfit
Armor of Gathering
Alystar's Dawnsteel
The Butcher's Apron
Scavenger's Carapace
Bloodrager Chains
Armor of the Vultures
Spectral Defender
The Burning Halo
Headguard of Compression
Thunderborn Visor
Helm of the Night
Crown of Secrets
Royal Circlet
Ravenous Hatred
Gauntlets of Biting
Quandor's Iron Will
Crucible
The Unbreakable Fist
The Hell Walker's Armsteel
Storm of Ferocity
Fists of Lengthened Shadows
Embers of Armageddon
Guides of Torment
Seekers of Vengeance
Gloves of Propitiation
Hunters of the Wicked
Persecutors of Disease
Master of Puppets
Leper Messiah
Effigy of Madness
The Silent Witness
Night Gaze
Dome of Presence
Veil of Bitterness
Tears of Scarlet
Crown of Deathless Kings
The Songless Bird
Lawbringer
Mallet of Striking
Pandemonium Crusher
Chaosweave Girdle
The Gift of Immortality
Immortal King's Detail
Reign of Chaos
Gore Rider
Dark Priest Helm
Skull of Subjugation
Grasp of Oblivion
Crown of Necropolis
Rathma's Death Gaze
Impaled Skull of Diablo
Belphegor's Hell Forged
Skinner of a Thousand Deaths
The Butcher's Axe
Messerschmidt's Reaver
Hellslayer
Prismatic Axe
Voidslasher
Death Cleaver
Hexen
Scilla's Adventuring Dress
Coat of the North
Sandstorm Armor
Warborn Jacket
Leather of Aut
Crow Caw
Spirit Forge
Shaftstop
Skullder's Ire
Greyform
Blinkbat's Form
Iron Pelt
Luminary
Facebleed
Fleshbreaker
Youth Eater
Guise of Innocence
Breath of the Dying
Accipiter Umbra
Ancient Citadel
Shadowdust
Celestial Shelter
The Hunter of the Wicked
Curator
The Horned Tiger
Warlord's Order
Caesar of War
Custos Vitae
Tigris' Armsteel
Bracers of Barbarous Cruelty
Warlord's Might
Bestiarius Bracers
Crucible Plate
Armor of Reckoning
Releaser of Rancor
Plate of Rejuvenation
Bringer of Night
Invictus
Sacramentum Gladiatorum
Fugitivus
Victoria
Mors Indecepta
Pugnator
Magna et infelix Rerum
Skyborn Armor
Oath of Honor
Eventide Mail
Venomancer Steel
Infernal Sigil
Herald of Destruction
Frenzy
Spirit Shell
Steelbite
Wyvern Plate
Plate of Exile
Thorned Carapace
Toothrow
Swordskin
Royal Mail
The Mouth of Madness
Bloodreaper Coat
Retribution Mailcoat
Gorget of Bloodline
The Astral Sleep
Soulfeed
Boots of Renewal
Boots of Spectrum
Death Striders
Boots of Arrow Dodging
Boots of Superiority
Boots of Stability
Boots of Life Everlasting
Leeching Boots
Firewalkers
Boots of Walling
Void Travellers
Lion Stance Boots
Forefathers' Weep
Fortune Stompers
Stoutheart Boots
Boots of Measure
Boots of Spectrum
Death Striders
Boots of Arrow Dodging
Boots of Superiority
Boots of Stability
Boots of Life Everlasting
Roots of Knowledge
Firewalkers
Boots of Walling
Void Travellers
Lion Stance Boots
Blood Moon Travellers
Fortune Stompers
Stoutheart Boots
Boots of Measure
Boots of Spectrum
Death Striders
Boots of Arrow Dodging
Boots of Superiority
Boots of Stability
Boots of Life Everlasting
Roots of Knowledge
Firewalkers
Boots of Walling
Void Travellers
Lion Stance Boots
Forefathers' Weep
Fortune Stompers
Stoutheart Boots
Spectral Belt
Belt of Engagement
Belt of Resource
Belt of Confidence
Belt of Armoring
Snowclash
Tal-Rasha's Restraint
Bloodfeast
Belt of Hunger
Belt of Witchery
Belt of Walling
Dreg'Atar Belt
Shadow Claw
Belt of Consumption
Belt of Dirty Fighting
Bladebuckle
Shadefighter
Optic Belt
Spectral Belt
Belt of Engagement
Belt of Resource
Belt of Confidence
Belt of Armoring
Snowclash
Bloodfeast
Belt of Hunger
Belt of Witchery
Belt of Walling
Dreg'Atar Belt
Shadow Claw
Belt of Consumption
Belt of Dirty Fighting
Bladebuckle
Shadefighter
Optic Belt
Obsidian Cap
The Intensifier
Fool's Crest
Optic Visor
Tarnhelm
Midas' Eye
Arrow Dancer
Cap of Arcana
Howltusk
Overlord's Helm
Thinking Cap
The Butcher's Gaze
The Necrotic Wreath
Masticator Mask
Mask of Familiarity
Face of Tragedy
Outcast's Face
Maw of Despair
Cindertouch
Chillgrip
Voidgrasp
Shockguards
Clerical Gauntlets
Velessar's Might
Velessar's Might
Velessar's Might
Riftwarp
Blightfingers
Steelrend
Colossal Grasp
Gabool's Vise
Windcaller
Bloodroots
Soulcaller
Frostburn
Handguards of Justice
Zodiac Armguards
Cindertouch
Chillgrip
Voidgrasp
Shockguards
Clerical Gauntlets
Velessar's Might
Velessar's Might
Velessar's Might
Riftwarp
Blightfingers
Steelrend
Colossal Grasp
Gabool's Vise
Windcaller
Bloodroots
Soulcaller
Frostburn
Handguards of Justice
Zodiac Armguards
Numbgaze
Fool's Crest
Path of Suffering
Helm of Eternal Radiance
Season of the Witch
The God of Many Faces
Gheed's Glasses
Zealot Mask
Mask of Secrets
Abyssal Mask
Nymbul
Eater of Arrows
The Regenerator
The Eastern Sun
Leaden Mask
Rainbow Gazer
Coronet of Clairvoyance
Crown of Ice and Fire
Thunderbreaker
Unwavering Defender
Season of the Witch
Lifegiver
Crown of Slumber
Spectral Corona
Copper Coronet
The Prosecutor
Crown of Thieves
Rough Justice
Groundbreakers
Roots of Iron
Greaves of Ultimation
Riftwalkers
Runeguard Treads
Boots of Completion
Galewind Greaves
Mythos
Holy Kickers
Greaves of the Essence of Life
Orb of Storms
Orb of Dominion
Orb of Raging Flames
Orb of Holy Might
Orb of Renovation
Eye of Scion
Orb of Spectral Defense
Orb of Spell Mastery
Orb of Time Deceleration
Orb of True Seeing
Acolyte's Cord
Girdle of the Phoenix
Sash of Immortal Worlds
Serenity in Murder
Midas' Goldwrap
Constriction Cord
God's Hate
Black Heresy
Cataclysm
Belt of Greater Engagement
Belt of Resource
Belt of Confidence
Belt of Armoring
Belt of Violent Decay
Belt of Stolen Dreams
Gorefeast
Girdle of Hunger
Girdle of Witchery
Dreg'Atar Girdle
Shadow Talon
Behemoth Waistguard
Belt of Deception
Bladeguard
Girdle of Battle Awareness
Colossus Belt
Droolkill's Hide
Gurmex' Outfit
Tombshambler's Skin
Lich Queen's Robes
Foulmaw's Hide
Plaguewrath's Furs
Bloodraven's Cape
Chain of Command
Gem of Dark Sorcery
Stone Ward
The Oracle
Pendant of the Dark Essence
Reaper of Souls
Kabraxis' Tainted Shard
Stormseer Relic
Ulmo's Bounty
Beacon of Destruction
Runebender Thread
Boots of Seeding
Roots of Iron
Greaves of Ultimation
Riftwalkers
Runeguard Treads
Boots of Completion
Galewind Greaves
Mythos
Skyfall Footpads
Greaves of the Essence of Life
Wyrmscale Footguards
WindStomp
MoltenWalk
Riders of the Storm
Winter Treads
Stompers of Chaos
Boots of Roses
Emberstone Walkers
Swamprunner Boots
Bloodhound Boots
Daystride
Gorestompers
Silkweave
Riftmarch
Spellsage
Boots of Transcendence
Dreadwalkers
Groundbreakers
Boots of Thousand Riddles
Worldstone Runners
Fiendflesh Greaves
Serpentbite
Gravewalker Boots
Moonheart
Siggard's Stealth
Spiritseeker
Spellbreach
Pulse of the Void
Soulbinder Cord
Spellweaver
Starkeeper's Coil
Skyreach
The Waning Moon
Darkblaze
Dawn of Purity
Longterror
Clayguard Loop
Belt of Greater Knowledge
Salve Regina
Herald of Zakarum
Dawnshard
Vortex of Thunder
Oathbreaker's Keep
Anduril's Heal
Yeqon's Valor
Phalanx of Immortals
Explorer's Coat
Coat of Holy Might
Civerb's Vest
Coat of the Untaimed
Sunseal Armor
Soulward
Obsidian Coat
Voidmarrow
Sorrow
Eden Ring
Anathema
Belial's Wishmaker
Spiritbinder
The Red Patriarch
Band of Ten Truths
Horazon's Coil
Ring of Lore
Conjuration Seal
Thunderloop
Midas' Terret
Massaraksh
Ward of Insight
King Leoric's Signet
Blueprint
Naj's Puzzle
Doom Serpents
Solicitude Band
Ring of Entropy
Enigma
Tainter
Pelta Lunata
The Deflector
Skullkeep
Umbral Disk
Steelclash
Bulwark of Broken Dreams
The Plunderer
Tiamat's Rebuke
Kabraxis' Lid
Moloch's Ward
Medusa's Gaze
Aegis of the Seer
The Untouchable Guard
Defense of the Ancients
Hightower Shield
The Undefeated's Shield
Flamma's Aegis
Doomstopper
Mercurial Shield
Ethereal Guard
Alma Negra
Blazetouch
Stormshield
Shaval's Rhythm
Triumph
Fortune Seeker
Hearth
Assault Aegis
Spellscourge
Celestio
Kivas' Defender
Witch Wail
Pigskin
Seer's Palm
Sage Ward
Solar Shield
Dregbez' Teaching
Vanguard of Renewal
Infernal Arbiter
Pandemonium Thunderer
Catcher of Souls
Soulbleed
Jaws of Devouring
Cauldron of Paragon
Fleshwarp
Mask of Toxicity
Murderer's Casque
Visor of Deep Wounds
Bloodscent
Seeker of Prey
Thunderbite
Halaberd's Reign
Bhaltavir's Rage
Schism
Mendicant Mask
Quillbreaker
Healer of Spirits
Overlord Mask
The Unbreakable Faceguard
Faceripper
Solar Defender
Liquidation Face
Harlequin Mask
The Hundred Eyes
Hunter of the Doomed
Snapweave
Gauntlets of Immolation
Arrowcatch
Spectral Bracers
Obsidian Grasp
Runic Bracers
Spellmakers
Rejuvenation Grips
Soulfly
Overlord Grasp
Ikzelion's Reach
Gauntlets of the Magi
Dawnbringers
Infernal Scorchers
Thunderbringers
Dark Matters
Blacksteel Bracers
Age of the Fifth Sun
Touch of Anguish
Midas' Ring
Ring of Deeper Meaning
Fixity Band
Boilrot's Cover
Ring of Intensity
Ring of Sleight
Ring of Tenacity
Ring of Incantation
Prayer of the Dawn
Signet of the Sixth Gate
Oppressor Seal
Oblitorix
Coven Ravager
Ring of Twilight
Ring of Tall Shadows
Blackwater Seal
Lorekeeper's Signet
Bloodseal
Theurgic Ring
Voidbinder
Pact of Darkness
Ring of the Heart
Stardust
The Black King's Burning Touch
Nightscorn
The Five Seasons
Black Coven
Deathward
Ring of Amplification
Dance of Elements
Optic Ring
Behemoth Ring
Cataclysm
Belt of Greater Engagement
Belt of Resource
Belt of Confidence
Belt of Armoring
Belt of Violent Decay
Belt of Stolen Dreams
Gorefeast
Girdle of Hunger
Girdle of Witchery
Dreg'Atar Girdle
Shadow Talon
Behemoth Waistguard
Belt of Deception
Bladeguard
Girdle of Battle Awareness
Colossus Belt
Dark Priest Helm
Helm of Subjugation
Black Plague Seeker
Dal Da'Etzarg
The Muffled Echo
Holy Fortress
Sphere of Holy Might
Dim Vision
Midas' Touch
Wisdom Chasers
The Holy Dogma
Fists of Wrath
Firmgrip
Shock Pincers
Bard's Tale
Rainbow Gloves
Guards of Resource
Winds of Change
Clasp of the Infinite
The Butcher's Gloves
Rising Star of James
Immortal King's Will
Croppler Domer's Siphon
Horazon's Willbender
Annihilus
Bloodrite
Earthshatter Treads
Girdle of the Seventh Gate
Sinrend
Light Defenders
Gloves of Lore
Gloves of Onan
Gloves of Renewal
Firegrip
Voidreach
Spectral Amplifiers
Gloves of Ethereal Defense
Inscribed Gloves
Shimmering Gloves
Dwarven Gloves
Deflecting Gloves
Marauder's Gloves
Hellscourge
Thundertouch Bracers
Runesigned Guards
Blacksilk Guards
Spellrite
Gloves of Greater Spellmaking
Spellgrip
Mercurial Plate
Runeforged Plate
Defender of Denial
Godly Greatplate
Stormguard
Aldur's Legacy
Baranar's Defenders
Cap of Secrets
Necrolord's Helm
Gorephase
Deathmark
Night's Dew
Cap of Speeding
Outcast's Truth
Irontreads
Greaves of Holy Might
Greaves of Burning Hell
Greaves of Storms
Greaves of Arcane Power
Boots of Resource
Infernal Stomp
Boots of Equilibrium
Stoneheart Boots
Voidstep
Stonetreaders
Shauril's Grace
Silkstride
Etherwalk
Zodiac Traveler
Bringer of Sunrise
Rathma's Bone Ribcage
Corpsemourn
Lionskull's Stampede
Wake of Destruction
Call of Chtulhu
Rathma's Girth
Girdle of Bone Infantry
Angerhorn's Resolve
Pinky's Negator
Bloodrip's Crown
Solas' Faceguard
Pain Reaver
Porcupine
Immortal King's Stone Crusher
Doomfall
Worldly Philter
Journeymen's Potion
Draught of Force
Ornate Brew
Vorpal Brew
Life Tonic
Invocation Elixir
Potion of Heavens
Drink of Transformation
Grasp of Insatiability
Molten Armguards
Benetzaron's Gloves
Beasthunter's Gloves
Undead Hunter's Gloves
Demon Hunter's Gloves
Pact of Protection
Shield of Seers
Savior's Buckler
The Red Steed
Black Void Shield
Slime Shield
Fletcher's Buckler
Circle of Storms
Adventurer's Buckler
Divinator
Shield of Worldly Magma
Circle of Dragons
Gray Tower Shield
Vorpal Disk
Raven Gaze
Explorer's Shoes
Burnzappers
Spellweb Footpads
Slippers of the Unblessed
Shoes of Greater Knowledge
Rift-Torn Shoes
The Dying Light
Spellborn Shoes
Magelord Footpads
Tabantar's Moltenpads
Scumrot's Bonecrusher
Balthazar's Tatters
Seethespell's Shoes
Abigor's Footwear
Torvatus' Footwraps
Moloch's Feet
Defiler's Footstraps
Immortal King's Pillar
Immortal King's Forge
Immortal King's Soul Cage
Immortal King's Wall
Tigris' Visor
Sazabi's Ghost Liberator
Sazabi's Mental Sheath
Celestial Guard
Celestial Visor
Arctic Helm
Arctic Furs
Rathma's Bonewall
Rathma's Grips
Rathma's Treads
Sigon's Casque
Sigon's Shelter
Poseidon's Crest
Poseidon's Cover
Heavenly Mercy
Heavenly Valor
Heavenly Blessing
Heavenly Justice
Stonefather
Norrec's Perfectionism
Frozen Cave Arch
Ambivalence
Polaira
Aconit Napel
Band of Empathy
Nosferatu's Black Seal
Warmaster's Charm
Bloodpulse
Gem of Daylight
Ragecaller
Nosferatu's Nocturnal Symphony
Cape of Reflections
Heart of Winter
Tigris' Field Plate
Armor of Solstice
Cape of Blinking
Starfire
Stormseer Sapphire
Arctic Ice
Voidscourge
Blood Conduit
Dagger of Discernment
Ourhs of Command
Dreg'atar Dagger
Daggerzorn
Dagger of Fiendblood
Fang of Twilight
Asp Dagger
Umbaru Spike
The White Cobra
Etherfang
Scholar's Dagger
Dagger of Onan
Voidcarver
Solar Dagger
Moonshine
Goldcutter
Javlok's Bite
Domination Decree
Grimwound
Runed Dagger of Dark Fate
Tainted Knife of Nere'val
The Jumping Knife
Shard of Traveling
Red Harvest
Arch-Summoner's Ceremonial Knife
Fiendblade
Starsower
Trang-Oul's Tongue
Trang-Oul's Heart
Vidala's Ambush
Vidala's Fetlock
Vidala's Barb
Sazabi's Cobalt Redeemers
Tempest
Vilecast
Damu'Ezzin's Ruth
Basilisk Claw
Hexfire
Mindweaver
Dreadcall
Xilan's Fang
Jaganzi's Covenant
Xalgos' Claw
Xorgan's Immolation Dagger
Yagres' Fleshcarver
Sigon's Gage
Spellflayer Chain
Shadow Strider
Manifestarius
Heart of Knowledge
Lament of Blood
Mother's Rotting Heart
Pulse of Perception
Heart of Divination
Jem'mas' Beating Heart
Umbaru Tradition
Fiendgaze Heart
Bloodrift
Core of Hatred
Blistered Heart of Beastrage
Heart of Abyss
White Lye
Heart of Freedom
Ghoulhide
Trang-Oul's Talons
Claws of Zeal
Grips of Mana Strength
Obsidihand
Skytouch
Bloodcall
Trang-Oul's Stompers
Trang-Oul's Guise
Trang-Oul's Scales
Venomancer Raiment
Neophyte
Greyfence
Balrogue
The Red Lion
Tainted Circle
Libra
Watcher of Ether
Void Drinker
Phaseclaw's Touch
Thundertouch
Burnfeast's Cunning
Grimhorn's Charger
Duriar's Steel
Torvatus' Gift
Voidbreaker
Sunset Shinguards
Sunset Parma
Wintergrip
Bladedancer Grips
Axe of Traveling
Necklace of Anchoring
Memoryte
Ring of Rosary
Beasthunter Signet
Eagle Sight Ring
Ring of Greater Shielding
Ring of the Elders
Worldstone Breaker
The Red Snowdrop
Wells of Midnight
Stabilizing Toecaps
Aspirant Kicks
Mist Walkers
Facerippers
Fists of Infinity
Icewind Tale
The Negotiator
Phenomenace
Mortschlag
Wasteguard
Paradoxique
Night Club
Eaglehorn
Blitzen
Bramble
Ring of Engagement
Giant's Knuckle
Greyskull Ward
Sir De'Ragon's Wye
Sir De'Ragon's Print
Sir De'Ragon's Seal
Bloodline Stone
Onan's Mascot
Totem of Revelations
Thorbal's Desecrator
Witch Slicer
Horadric Dice
Onan's Puzzle
Cube of Armageddon
The Rift Device
The Brocaded Cube
Cube of Enlightenment
Wrackbinder
Protectagon
Prosperity Cube
Scourge of Scion
Garbaroth's Soultrap
Charged Gloves
Tahu's Mend
Anduril's Heritage
Belt of Chasing Shadows
Sash of Inner Spirit
Librarian's Tunic
Empowered Cloth
Blackoak Shield
The Roaring Dragon
White Wind
The Unforgiven
Heartslasher
The Endless Darkness
Blade of Slumber
Hakai Suru
Itami no Dorei
Gold Incuser
The Brutalizer
Gate of Nightmares
Mirror of Destruction
Shield of Rooting
Shield of Destiny
The Monolith
Disc of Lifeblood
Buckler of Heroism
Lunacy Shield
Honestone
Burning Aim
Fulminator
Void Sting
Blight Touch
Leadcrow
The Black Widow
Titan Grail
Shockwave Halo
Ring of Celestial Castles
Gilded Python
Inscripted Shield
Face of Divinity
Disc of Dominion
Shadow Seal
Borgasatholi
Eagle Crucifix
Shield of Spider Eyes
Bone Mill
Devastation Edge
Frostmourne
Doombringer
Bonescythe
Edge of Impurity
Annihilator
Club of the Dead
Enforcer
Bloodswan
Scepter of Radiance
Aethereal Scepter
Scepter of Onslaught
Interrogation Rod
Grail of Liberty
Hand of Compassion
Scepter of Confessions
Box of Fleecing
Icon of Summoning
Stone of Heroism
Trap of Untold Riches
Cube of Triumph
Demultiplexer
Decimation Instrument
Chaos Device
Lamp of Turmoil
Symbol of Learning
Hat of War
Obsidian Coif
Optic Visor
Horazon's Concentrator
Coif of Insights
Cap of the Forgotten Stars
Hood of Faded Visions
Thinking Cowl
Coif of Grieving
Wind Strider
Gold Warden
Timekeeper
Wind Breaker
Sculptor of Cruelty
Adamantite Mallet
Queller of Fury
Mallet of Jumping
Legacy of Power
Bultar's Reach
Voice of Destruction
Hand of the Void
Bloodforged Mallet
Ultimatus
Betrayer of Burdens
Godslayer
Lantern of Denial
Goresong
Scepter of Earthquakes
Voidweep
Mallet of Undoing
Mallet of Doomsday
Mallet of Locusts
Heavenly Wrath
Footguards of Finesse
Fleeting Fall
Oakstand
Boots of Starry Nights
Empyrean Striders
Winterwalk
Sunstroke Robe
Storm Drape
Loop of Defilement
Fletcherique
Immortal Band
Ravenheart
Nokozan Skewer
Mindshiv
Razor of Trials
Ironbark
Giant Slayer
Heartstinger
Warwidow
Stoneslicer
Stoneheart Shard
Steelshank
Skullstice
Vulturebeak
Medallion of Chaos
Rageweaving Warlord
Ironsting
Dissector
Peacebreaker
Windcarver
Ebonfang
Doomreaver
Reaper of Tears
Dirk of Shadowsouls
Blindstrike
Shadowshiv
Lightbane
Soulfrost
Lunaris
Bloodsworn Jaws
Cranium Trinity
Festerfang
Viperchant
Undertaker's Wand
Rod of Magma
Void Corruptor
White Horizon
Exterminatus
Harbinger of Doom
Warcurve
Mendicant's Dream
Breadwinners
Death Chasers
Armor of Shattered Dreams
Gold Fleece
Warkeeper
Jaws of Eternal Terror
Chant of Demolition
Spurs of Momentum
Stonefire Trail
Lynx' Eye
Amulet of the Ox
Deadly Devotion
Jaws of the Fallen
Burning Aim
Fulminator
Void Sting
Blight Touch
Black Oak Branch
The Black Widow
The Needler
The Masticator
Torn Flesh of Souls
Wisdom's Wrap
Timeworn Tapestry
Goldenwheel
Starlight Boon
Hornfel Shield
Soulbreaker
Rainbowkeep
Spine Warden
The Argent Mender
Glimmerguard
Foxtrap Buckler
Wolftrap Buckler
Beartrap Buckler
Beartrap Buckler
Torch of Devotion
Wand of Fading Memories
The Amplifier
Conjurer of Death
Beacon of Darkness
Hand of Command
Allure of Mortality
Crossheart Rig
Greedskull
Civerb's Mane
Renegade's Halo
Pledge of Life
Deathscourge
Black Devourer
Scorpion
Eater of Souls
Qovlu Sawarim
Roaring Lion
Peacemaker
Dogma
Covenant of Revenge
The Sun of Truth
Al Ankabut
Aranoch Vulture
Lionpounce
Student of Warfare
Fortress of Conviction
Djark'Zulum
Cap of Dunes
Seeker of Riches
Cap of Chances
Cap of the Fogotten Stars
Cap of Faded Visions
Cap of Medicus
Dome of Anger
The Intensifier
Optic Visor
The Lich Coronet
Butchergaze
Spiritual Steward
Hawkbeak
Fulminator
Void Sting
Blight Touch
Leadcrow
The Black Widow
Sarbadhar
Salat of Eventide
Faceveil of Protection
Shepherd of Wolves
Veil of Speeding
Veil of Mirrors
Warden of Fallen Powers
Helm of Breaking Might
Face of Suffering
The Black Swan
Diamondyne
Omen of Oblation
Gloom Razor
Spectral Razor
Edge of Flaying
Death Reaver
Ghostly Moonblade
Hellmonger
Flesh Ravager
Dome of Dismay
Helm of Spirits
Muk'Azzan's Helmet
Sandstorm
Helm of Fasting
Scales of Fading Twilight
Word of Honor
Eventide Scale
Venomancer Chain
Infernal Sign
Harness of Destruction
Dervish Armor
Immovable Plate
Rising Moon
Cuirass of Rapacity
Voidspawn
Peasant Cap
Peasant Cap
Peasant Cap
Peasant Cap
Peasant Cap
Peasant Cap
Amulet of the Brume
Amulet of the Brume
Amulet of the Brume
Amulet of the Brume
Amulet of the Brume
Amulet of the Brume
Ring of Purity
Ring of Purity
Ring of Purity
Ring of Purity
Ring of Purity
Ring of Purity
Empyrean Band
Empyrean Band
Empyrean Band
Empyrean Band
Empyrean Band
Empyrean Band
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Veil of Steel
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Spiritual Treasure
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Caster
Griswold's Caster
Griswold's Caster
Griswold's Caster
Griswold's Caster
Griswold's Caster
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Enchanter
Griswold's Enchanter
Griswold's Enchanter
Griswold's Enchanter
Griswold's Enchanter
Griswold's Enchanter
Griswold's Slasher
Griswold's Slasher
Griswold's Slasher
Griswold's Slasher
Griswold's Slasher
Griswold's Slasher
Griswold's Fencer
Griswold's Fencer
Griswold's Fencer
Griswold's Fencer
Griswold's Fencer
Griswold's Fencer
Griswold's Crusher
Griswold's Crusher
Griswold's Crusher
Griswold's Crusher
Griswold's Crusher
Griswold's Crusher
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Edge
Griswold's Tool
Griswold's Tool
Griswold's Tool
Griswold's Tool
Griswold's Tool
Griswold's Tool
Voidheart Vestment
Dragonflame Coat
Ironheart's Embrace
Bloodletter's Wargear
Frostborn Chainshirt
Serpent's Husk
The Butcher's Cleaver
The Undead Crown
The Undead Crown
The Undead Crown
The Undead Crown
The Butcher's Cleaver
The Butcher's Cleaver
The Butcher's Cleaver
The Butcher's Cleaver
King Leoric's Shadowblade
King Leoric's Shadowblade
King Leoric's Shadowblade
King Leoric's Shadowblade
King Leoric's Shadowblade
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Ward of Blood
Ward of Blood
Ward of Blood
Ward of Blood
Plate of Gorash
Faust
Faust
Faust
Faust
Faust
The Itchy Teeth
Bloodbite
Baraph's Holy Mangler
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Gharbad's Vow
Ring of Culmination
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Griswold's Bow
Burning Aim
Fulminator
Void Sting
Blight Touch
Leadcrow
The Black Widow
The Butcher's Signet
The Butcher's Mascot
The Butcher's Mascot
The Butcher's Mascot
Shadowcrow's Buckler
Shadowcrow's Buckler
Shadowcrow's Buckler
Shadowcrow's Buckler